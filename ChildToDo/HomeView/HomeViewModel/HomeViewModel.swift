//
//  HomeViewModel.swift
//  ChildToDo
//
//  Created by sako0602 on 2023/05/08.
//

import Foundation

enum LoadingState {
    case loading
    case answer
}

class HomeViewModel: ObservableObject {
    
    @Published var state: LoadingState = .loading
    @Published var isAddView = false
    @Published var isShowTodoDetailView = false
    
    @Published var toDos = [
        ToDo(name: "Êúù„ÅÆ‰ºö",
             toDoDetails: [
                ToDoDetail(name: "„ÅÜ„Åü", isCheck: false),
                ToDoDetail(name: "„Å™„Åæ„Åà„Çà„Å≥", isCheck: false),
                ToDoDetail(name: "„Åç„Çá„ÅÜ„ÅÆ„Çà„Å¶„ÅÑ", isCheck: false),
                ToDoDetail(name: "„Åç„Çá„ÅÜ„ÅÆ„Åç„ÇÖ„ÅÜ„Åó„Çá„Åè", isCheck: false),
                ToDoDetail(name: "„Åã„Åë„Åî„Åà", isCheck: false)
             ]),
                        
        ToDo(name: "Â∏∞„Çä„ÅÆ‰ºö",
             toDoDetails: [
                ToDoDetail(name: "„Åå„Çì„Å∞„Å£„Åü„Åì„Å®", isCheck: false),
                ToDoDetail(name: "„Çè„Åô„Çå„ÇÇ„ÅÆ„ÅÆ„Åã„Åè„Å´„Çì", isCheck: false),
                ToDoDetail(name: "„Åã„Åà„Çä„ÅÆ„Åã„Åè„Å´„Çì", isCheck: false),
                ToDoDetail(name: "„Åã„Åë„Åî„Åà", isCheck: false)
             ])
        
    ]
    //UserDefault„Åß„Éá„Éº„Çø„Çí„Éá„Éê„Ç§„Çπ„Å´‰øùÂ≠ò„Åô„ÇãÂá¶ÁêÜ„ÇíËøΩÂä†„Åó„Å¶„ÅÑ„Åè„ÄÇ
    private let userDefaultManager = UserDefaultManager()
    
    func todoDetailFalse(todo: ToDo){
        guard let tIndex = toDos.firstIndex(where: { $0.id == todo.id }) else { return }
        for index in toDos[tIndex].toDoDetails.indices {
            toDos[tIndex].toDoDetails[index].isCheck = false
        }
//        toDos[tIndex].toDoDetails.indices.forEach{
//            toDos[tIndex].toDoDetails[$0].isCheck = false
//        }
    }
    
    func detailBoolFalse(){
        toDos = toDos.map{ toDo -> ToDo in
            var details: [ToDoDetail] = []
            toDo.toDoDetails.forEach{ d in
                var detail = ToDoDetail(name: d.name, isCheck: false)
                detail.id = d.id
                details.append(detail)
            }
            var newToDo = ToDo(name: toDo.name, toDoDetails: details)
            newToDo.id = toDo.id
            return toDo
        }
        do {
            try userDefaultManager.save(toDo: toDos)
        } catch {
            let error = error as? DataConvertError ?? DataConvertError.unknown
            print("10101",error.title)
        }
    }
    
    func dChange(todo: ToDo, todoDetail: ToDoDetail){
        guard let tIndex = toDos.firstIndex(where: { $0.id == todo.id }) else { return }
        guard let dIndex = todo.toDoDetails.firstIndex(where: { $0.id == todoDetail.id }) else { return }
        toDos[tIndex].toDoDetails[dIndex].isCheck.toggle()
        do {
            try userDefaultManager.save(toDo: toDos)
        } catch {
            let error = error as? DataConvertError ?? DataConvertError.unknown
            print("1111",error.title)
        }
    }
    
    //HomeView„ÅßSidebar„Åã„ÇâÊ∏°„Åï„Çå„Å¶„Åç„ÅüTodo„ÅåÊåÅ„Å£„Å¶„ÅÑ„ÇãTodoDetail„ÅÆIndex„ÇíÂèñÂæó„Åô„Çã„Åü„ÇÅ„Å´‰ΩøÁî®
    func todoDetailIndex(todo: ToDo, todoDetail: ToDoDetail) -> Int {
        guard  let toDoDetailIndex = todo.toDoDetails.firstIndex(where: { $0.id == todo.id }) else { return 0 }
        return toDoDetailIndex
    }

    //moveTodoDetail„É°„ÇΩ„ÉÉ„Éâ„ÅßÂÜÖ„Åß„ÄÅÊ∏°„Åï„Çå„Å¶„Åç„ÅüToDo„ÅÆInt„ÇíÊ§úÁ¥¢„Åô„Çã„Åü„ÇÅ„Å´‰ΩøÁî®
    func todoIndex(todo: ToDo) -> Int {
        guard let todoIndex = toDos.firstIndex(where: { $0.id == todo.id }) else { return 0 }
        //guard let index = toDos.firstIndex(where: { $0.id == todo.id }) else { return }
        return todoIndex
    }
    //todoDetail„ÅÆÂ†¥ÊâÄ„ÇíÂ§âÊõ¥„Åï„Åõ„Çã„Åü„ÇÅ„Å´‰ΩøÁî®„Åô„Çã
    func moveTodoDetail(indexSet: IndexSet, index: Int, todo: ToDo){
        let todoIndex = todoIndex(todo: todo)
        self.toDos[todoIndex].toDoDetails.move(fromOffsets: indexSet, toOffset: index)
        do {
            try userDefaultManager.save(toDo: toDos)
        } catch {
            let error = error as? DataConvertError ?? DataConvertError.unknown
            print("2222",error.title)
        }
    }

    //toDos„ÅÆÂ†¥ÊâÄ„ÇíÂ§âÊõ¥„Åï„Åõ„Çã„Åü„ÇÅ„Å´‰ΩøÁî®„Åô„Çã
    func moveTodo(indexSet: IndexSet, index: Int){
        self.toDos.move(fromOffsets: indexSet, toOffset: index)
        do {
            try userDefaultManager.save(toDo: toDos)
        } catch {
            let error = error as? DataConvertError ?? DataConvertError.unknown
            print("3333",error.title)
        }
    }
    //ToDoDetail„ÅÆË¶ÅÁ¥†„ÇíÂâäÈô§„Åô„Çã„Åü„ÇÅ„Å´‰ΩøÁî®„Åô„Çãüü•„Ç®„É©„Éº„ÇíÊè°„Çä„Å§„Å∂„Åó„Å¶„ÅÑ„Çã
    func deleteTodoDetail(todo: ToDo, todoDetail: ToDoDetail, offset: IndexSet)  {
        guard let todoIndex = toDos.firstIndex(where: { $0.id == todo.id }) else { return }
        toDos[todoIndex].toDoDetails.remove(atOffsets: offset)
        do {
            try userDefaultManager.save(toDo: toDos)
        } catch {
            let error = error as? DataConvertError ?? DataConvertError.unknown
            print("44444",error.title)
        }
    }
    
    //toDos„ÅÆË¶ÅÁ¥†„ÇíÂâäÈô§„Åô„Çã„Åü„ÇÅ„Å´‰ΩøÁî®„Åô„Çã
    func deleteTodo(offset: IndexSet){
        self.toDos.remove(atOffsets: offset)
        do {
            try userDefaultManager.save(toDo: toDos)
        } catch {
            let error = error as? DataConvertError ?? DataConvertError.unknown
            print("55555",error.title)
        }
    }
    
    //„Ç¢„Éó„É™Ëµ∑ÂãïÊôÇ„Å´‰øùÂ≠ò„Åï„Çå„Å¶„ÅÑ„ÅüÈÖçÂàó„ÅÆ„Éá„Éº„Çø„ÇíÂëº„Å∂
    func onApper(){
        do {
            let savedTodos = try userDefaultManager.load()
            toDos = savedTodos
        } catch {
            let  error = error as? DataConvertError ?? DataConvertError.unknown
            print("66666",error.title)
        }
    }
    
    //toDosÊñ∞„Åó„ÅÑTODO„ÇíËøΩÂä†„Åô„Çã„Åü„ÇÅ„Å´‰ΩøÁî®
    func addTodo(text: String) throws {
        guard text != "" else {
            throw NonTextError.nonTodoText
        }
        self.toDos.append(ToDo(name: text, toDoDetails: []))
        do {
            try userDefaultManager.save(toDo: toDos )
        } catch {
            let error = error as? DataConvertError ?? DataConvertError.unknown
            print("77777",error.title)
        }
        isAddView = false
    }
    
    //TrainerAddView„ÇíÈñã„Åã„Åõ„Çã
    func isShowAddView(){
        isAddView = true
    }
    //TrainerAddView„ÇíÈñâ„Åò„Åï„Åõ„Çã
    func isCloseAddView(){
        isAddView = false
    }

    //ÈÅ∏Êäû„Åó„ÅüToDo„Å´Êñ∞„Åó„ÅÑTodoDetail„ÇíËøΩÂä†„Åô„Çã„Åü„ÇÅ„Å´‰ΩøÁî®
    func addTodoDetail(text: String, todo: ToDo) throws {
        if let index = toDos.firstIndex(of: todo){
            var updatedToDo = todo
            guard text != "" else {
                throw NonTextError.nonTodoDetailText
            }
            updatedToDo.toDoDetails.append(ToDoDetail(name: text, isCheck: false))
            toDos[index] = updatedToDo
        }
        do {
            try userDefaultManager.save(toDo: toDos)
        } catch {
            let error = error as? DataConvertError ?? DataConvertError.unknown
            print("88888",error.title)
        }
    }
    
    //detailView„Å∏Ê∏°„Åï„Åõ„ÅüTODOÊÉÖÂ†±„ÇíÈÖçÂàó„ÅÆ‰∏≠„Åã„ÇâÊ§úÁ¥¢„Åó„ÄÅ‰∏ÄËá¥„Åó„ÅüTODO„ÅÆÊÉÖÂ†±„ÇíËøî„Åô„Åü„ÇÅ„Å´‰ΩøÁî®
    func returnAdress(todo: ToDo?) -> ToDo? {
        guard let todo = todo else {
            return nil
        }
        //ÂèñÂæó„Åó„Å¶„Åç„ÅüTODO„ÅÆID„ÇíÊ§úÁ¥¢„Åó„Å¶TODODetail„ÇíËøî„Åô„ÄÇ
        guard let index = toDos.firstIndex(where: { $0.id == todo.id }) else { return nil }
        return toDos[index]
    }
    
    func save(todoName: String, newToDo: ToDo) throws {
        guard let index = toDos.firstIndex(where: { $0.id == newToDo.id }) else { return }
        toDos[index] = newToDo
        guard todoName != "" else {
            throw NonTextError.nonTodoDetailText
        }
        toDos[index].name = todoName
        do {
            try userDefaultManager.save(toDo: toDos)
        } catch {
            let error = error as? DataConvertError ?? DataConvertError.unknown
            print("99999",error.title)
        }
    }
    
    func todoDetailSave(newTodoDetail: ToDoDetail, todo: ToDo, newName: String) throws {
        guard let index = toDos.firstIndex(where: { $0.id == todo.id }) else { return }
        guard  let dIndex = todo.toDoDetails.firstIndex(where: { $0.id == newTodoDetail.id }) else { return }
        guard newName != "" else {
            throw NonTextError.nonTodoDetailText
        }
        toDos[index].toDoDetails[dIndex].name = newName
        do {
            try userDefaultManager.save(toDo: toDos)
        } catch {
            let error = error as? DataConvertError ?? DataConvertError.unknown
            print("$$$$$$$",error.title)
        }
    }
}
